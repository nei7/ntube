// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/nei7/ntube/app/user/internal/biz"
	"github.com/nei7/ntube/app/user/internal/conf"
	"github.com/nei7/ntube/app/user/internal/data"
	"github.com/nei7/ntube/app/user/internal/server"
	"github.com/nei7/ntube/app/user/internal/service"
	"github.com/nei7/ntube/pkg/bootstrap"
	"go.opentelemetry.io/otel/sdk/trace"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, dbConfig *bootstrap.DBConfig, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	conn, err := bootstrap.NewPgxPool(dbConfig)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(conn, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	writer, err := service.NewKafkaSender(confServer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userService := service.NewUserService(userUsecase, writer)
	grpcServer := server.NewGRPCServer(confServer, userService, logger, tracerProvider)
	httpServer := server.NewHTTPServer(confServer, userService, logger, tracerProvider)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
