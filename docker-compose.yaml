version: "3.9"
services:
  postgres:
    image: postgres:12-alpine
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ntube
    volumes:
       - pgdata:/var/lib/postgresql/data
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    networks:
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    logging:
      driver: none
  jaeger:
    networks:
      - backend
    image: jaegertracing/all-in-one:latest
    volumes:
      - "./jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "14250:14250"
      - "14268:14268"
      - "6831:6831/udp"
      - "16686:16686"
      - "16685:16685"
  prometheus:
    networks:
      - backend
    image: prom/prometheus:latest
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
  otel_collector:
    networks:
      - backend
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - "./otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml"
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - "14278:14278"
    depends_on:
      - jaeger
  elasticsearch:
    image: elasticsearch:7.17.8
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    hostname: kafka
    links:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: 'videos:1:1'
  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.10.2'
    ports:
      - "5601:5601"
    hostname: kibana
    depends_on:
      - elasticsearch
  # rest_server:

  #   build:
  #     context: .
  #     dockerfile: ./docker/rest_server/Dockerfile
  #   ports:
  #     - "3000:3000"
  #   command: rest_server -env /api/.env
  #   environment:
  #     - name=value
  #   depends_on:
  #    - postgres
  #    - jaeger
  #    - prometheus
  #    - otel_collector
  # elasticsearch_indexer:
  #   build:
  #     context: .
  #     dockerfile: ./docker/elasticsearch_indexer/Dockerfile
  #   command: elasticsearch_indexer -env /api/.env
  #   environment:
  #     KAFKA_TOPIC: videos
  #     KAFKA_HOST: localhost
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #     - prometheus
  #     - otel_collector
  #     - jaeger
  #     - elasticsearch
  # video_server:
  #   build:
  #     context: .
  #     dockerfile: ./docker/video_server/Dockerfile
  #     args:
  #      VIDEO_STORAGE_PATH: /media
  #   volumes:  
  #    - video_storage:/usr/media
  #   command: video_server -env /api/.env
   
  #   environment:
  #     JAEGER_ENDPOINT: http://localhost:14268/api/traces
  #     KAFKA_TOPIC: videos
  #     KAFKA_HOST: localhost
  #     VIDEO_STORAGE_PATH: /media



   
networks:
  backend:

volumes:
  video_storage:
  pgdata: