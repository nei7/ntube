// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: video.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoUploadServiceClient is the client API for VideoUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoUploadServiceClient interface {
	UploadVideo(ctx context.Context, opts ...grpc.CallOption) (VideoUploadService_UploadVideoClient, error)
}

type videoUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoUploadServiceClient(cc grpc.ClientConnInterface) VideoUploadServiceClient {
	return &videoUploadServiceClient{cc}
}

func (c *videoUploadServiceClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (VideoUploadService_UploadVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoUploadService_ServiceDesc.Streams[0], "/VideoUploadService/UploadVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoUploadServiceUploadVideoClient{stream}
	return x, nil
}

type VideoUploadService_UploadVideoClient interface {
	Send(*UploadVideoRequest) error
	CloseAndRecv() (*UploadVideoResponse, error)
	grpc.ClientStream
}

type videoUploadServiceUploadVideoClient struct {
	grpc.ClientStream
}

func (x *videoUploadServiceUploadVideoClient) Send(m *UploadVideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoUploadServiceUploadVideoClient) CloseAndRecv() (*UploadVideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadVideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoUploadServiceServer is the server API for VideoUploadService service.
// All implementations should embed UnimplementedVideoUploadServiceServer
// for forward compatibility
type VideoUploadServiceServer interface {
	UploadVideo(VideoUploadService_UploadVideoServer) error
}

// UnimplementedVideoUploadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVideoUploadServiceServer struct {
}

func (UnimplementedVideoUploadServiceServer) UploadVideo(VideoUploadService_UploadVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}

// UnsafeVideoUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoUploadServiceServer will
// result in compilation errors.
type UnsafeVideoUploadServiceServer interface {
	mustEmbedUnimplementedVideoUploadServiceServer()
}

func RegisterVideoUploadServiceServer(s grpc.ServiceRegistrar, srv VideoUploadServiceServer) {
	s.RegisterService(&VideoUploadService_ServiceDesc, srv)
}

func _VideoUploadService_UploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoUploadServiceServer).UploadVideo(&videoUploadServiceUploadVideoServer{stream})
}

type VideoUploadService_UploadVideoServer interface {
	SendAndClose(*UploadVideoResponse) error
	Recv() (*UploadVideoRequest, error)
	grpc.ServerStream
}

type videoUploadServiceUploadVideoServer struct {
	grpc.ServerStream
}

func (x *videoUploadServiceUploadVideoServer) SendAndClose(m *UploadVideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoUploadServiceUploadVideoServer) Recv() (*UploadVideoRequest, error) {
	m := new(UploadVideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoUploadService_ServiceDesc is the grpc.ServiceDesc for VideoUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoUploadService",
	HandlerType: (*VideoUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadVideo",
			Handler:       _VideoUploadService_UploadVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "video.proto",
}
